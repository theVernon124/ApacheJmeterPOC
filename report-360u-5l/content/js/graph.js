/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 28800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 28800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 106350.0, "series": [{"data": [[0.0, 40.0], [0.1, 40.0], [0.2, 42.0], [0.3, 42.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 47.0], [0.8, 47.0], [0.9, 48.0], [1.0, 48.0], [1.1, 48.0], [1.2, 51.0], [1.3, 53.0], [1.4, 64.0], [1.5, 65.0], [1.6, 71.0], [1.7, 78.0], [1.8, 78.0], [1.9, 85.0], [2.0, 89.0], [2.1, 90.0], [2.2, 101.0], [2.3, 102.0], [2.4, 113.0], [2.5, 115.0], [2.6, 115.0], [2.7, 119.0], [2.8, 120.0], [2.9, 122.0], [3.0, 123.0], [3.1, 125.0], [3.2, 129.0], [3.3, 132.0], [3.4, 135.0], [3.5, 139.0], [3.6, 140.0], [3.7, 153.0], [3.8, 155.0], [3.9, 159.0], [4.0, 161.0], [4.1, 167.0], [4.2, 176.0], [4.3, 178.0], [4.4, 183.0], [4.5, 186.0], [4.6, 191.0], [4.7, 199.0], [4.8, 199.0], [4.9, 204.0], [5.0, 211.0], [5.1, 213.0], [5.2, 216.0], [5.3, 218.0], [5.4, 223.0], [5.5, 238.0], [5.6, 238.0], [5.7, 240.0], [5.8, 240.0], [5.9, 244.0], [6.0, 251.0], [6.1, 255.0], [6.2, 259.0], [6.3, 259.0], [6.4, 263.0], [6.5, 266.0], [6.6, 268.0], [6.7, 276.0], [6.8, 282.0], [6.9, 291.0], [7.0, 292.0], [7.1, 294.0], [7.2, 297.0], [7.3, 297.0], [7.4, 300.0], [7.5, 301.0], [7.6, 302.0], [7.7, 304.0], [7.8, 306.0], [7.9, 313.0], [8.0, 315.0], [8.1, 316.0], [8.2, 318.0], [8.3, 319.0], [8.4, 321.0], [8.5, 323.0], [8.6, 324.0], [8.7, 330.0], [8.8, 331.0], [8.9, 332.0], [9.0, 338.0], [9.1, 339.0], [9.2, 344.0], [9.3, 344.0], [9.4, 345.0], [9.5, 349.0], [9.6, 349.0], [9.7, 352.0], [9.8, 354.0], [9.9, 362.0], [10.0, 372.0], [10.1, 374.0], [10.2, 378.0], [10.3, 380.0], [10.4, 391.0], [10.5, 397.0], [10.6, 398.0], [10.7, 402.0], [10.8, 402.0], [10.9, 417.0], [11.0, 418.0], [11.1, 421.0], [11.2, 425.0], [11.3, 428.0], [11.4, 431.0], [11.5, 433.0], [11.6, 443.0], [11.7, 447.0], [11.8, 454.0], [11.9, 459.0], [12.0, 464.0], [12.1, 467.0], [12.2, 476.0], [12.3, 479.0], [12.4, 488.0], [12.5, 501.0], [12.6, 507.0], [12.7, 515.0], [12.8, 516.0], [12.9, 524.0], [13.0, 530.0], [13.1, 531.0], [13.2, 542.0], [13.3, 544.0], [13.4, 552.0], [13.5, 555.0], [13.6, 555.0], [13.7, 566.0], [13.8, 567.0], [13.9, 571.0], [14.0, 578.0], [14.1, 581.0], [14.2, 591.0], [14.3, 596.0], [14.4, 608.0], [14.5, 612.0], [14.6, 616.0], [14.7, 628.0], [14.8, 628.0], [14.9, 637.0], [15.0, 649.0], [15.1, 652.0], [15.2, 655.0], [15.3, 665.0], [15.4, 681.0], [15.5, 687.0], [15.6, 694.0], [15.7, 699.0], [15.8, 710.0], [15.9, 732.0], [16.0, 746.0], [16.1, 750.0], [16.2, 775.0], [16.3, 778.0], [16.4, 788.0], [16.5, 806.0], [16.6, 819.0], [16.7, 830.0], [16.8, 839.0], [16.9, 877.0], [17.0, 880.0], [17.1, 887.0], [17.2, 900.0], [17.3, 920.0], [17.4, 928.0], [17.5, 938.0], [17.6, 939.0], [17.7, 955.0], [17.8, 956.0], [17.9, 965.0], [18.0, 969.0], [18.1, 970.0], [18.2, 1000.0], [18.3, 1003.0], [18.4, 1031.0], [18.5, 1039.0], [18.6, 1047.0], [18.7, 1055.0], [18.8, 1058.0], [18.9, 1066.0], [19.0, 1110.0], [19.1, 1111.0], [19.2, 1148.0], [19.3, 1169.0], [19.4, 1170.0], [19.5, 1189.0], [19.6, 1194.0], [19.7, 1198.0], [19.8, 1202.0], [19.9, 1207.0], [20.0, 1223.0], [20.1, 1236.0], [20.2, 1278.0], [20.3, 1304.0], [20.4, 1316.0], [20.5, 1336.0], [20.6, 1344.0], [20.7, 1377.0], [20.8, 1382.0], [20.9, 1418.0], [21.0, 1435.0], [21.1, 1439.0], [21.2, 1490.0], [21.3, 1519.0], [21.4, 1554.0], [21.5, 1560.0], [21.6, 1563.0], [21.7, 1632.0], [21.8, 1693.0], [21.9, 1714.0], [22.0, 1740.0], [22.1, 1756.0], [22.2, 1879.0], [22.3, 1916.0], [22.4, 1957.0], [22.5, 1973.0], [22.6, 1978.0], [22.7, 1998.0], [22.8, 2005.0], [22.9, 2026.0], [23.0, 2041.0], [23.1, 2054.0], [23.2, 2062.0], [23.3, 2068.0], [23.4, 2096.0], [23.5, 2105.0], [23.6, 2110.0], [23.7, 2123.0], [23.8, 2135.0], [23.9, 2159.0], [24.0, 2163.0], [24.1, 2165.0], [24.2, 2194.0], [24.3, 2198.0], [24.4, 2224.0], [24.5, 2235.0], [24.6, 2240.0], [24.7, 2246.0], [24.8, 2261.0], [24.9, 2275.0], [25.0, 2289.0], [25.1, 2301.0], [25.2, 2326.0], [25.3, 2330.0], [25.4, 2335.0], [25.5, 2358.0], [25.6, 2363.0], [25.7, 2373.0], [25.8, 2380.0], [25.9, 2388.0], [26.0, 2406.0], [26.1, 2416.0], [26.2, 2430.0], [26.3, 2432.0], [26.4, 2457.0], [26.5, 2482.0], [26.6, 2510.0], [26.7, 2532.0], [26.8, 2548.0], [26.9, 2630.0], [27.0, 2718.0], [27.1, 2833.0], [27.2, 2861.0], [27.3, 2861.0], [27.4, 2900.0], [27.5, 2904.0], [27.6, 2925.0], [27.7, 2939.0], [27.8, 3003.0], [27.9, 3008.0], [28.0, 3030.0], [28.1, 3044.0], [28.2, 3109.0], [28.3, 3139.0], [28.4, 3201.0], [28.5, 3223.0], [28.6, 3257.0], [28.7, 3268.0], [28.8, 3284.0], [28.9, 3338.0], [29.0, 3363.0], [29.1, 3402.0], [29.2, 3415.0], [29.3, 3481.0], [29.4, 3508.0], [29.5, 3517.0], [29.6, 3519.0], [29.7, 3544.0], [29.8, 3567.0], [29.9, 3709.0], [30.0, 3886.0], [30.1, 3910.0], [30.2, 3943.0], [30.3, 3949.0], [30.4, 4111.0], [30.5, 4169.0], [30.6, 4191.0], [30.7, 4208.0], [30.8, 4213.0], [30.9, 4268.0], [31.0, 4287.0], [31.1, 4291.0], [31.2, 4318.0], [31.3, 4337.0], [31.4, 4373.0], [31.5, 4405.0], [31.6, 4570.0], [31.7, 4669.0], [31.8, 4679.0], [31.9, 4763.0], [32.0, 4794.0], [32.1, 4830.0], [32.2, 4857.0], [32.3, 4858.0], [32.4, 4958.0], [32.5, 4966.0], [32.6, 5002.0], [32.7, 5229.0], [32.8, 5240.0], [32.9, 5277.0], [33.0, 5316.0], [33.1, 5385.0], [33.2, 5388.0], [33.3, 5391.0], [33.4, 5529.0], [33.5, 5574.0], [33.6, 5576.0], [33.7, 5610.0], [33.8, 5697.0], [33.9, 5760.0], [34.0, 5878.0], [34.1, 5960.0], [34.2, 6014.0], [34.3, 6033.0], [34.4, 6210.0], [34.5, 6244.0], [34.6, 6257.0], [34.7, 6298.0], [34.8, 6385.0], [34.9, 6473.0], [35.0, 6597.0], [35.1, 6615.0], [35.2, 6618.0], [35.3, 6668.0], [35.4, 6730.0], [35.5, 6802.0], [35.6, 6889.0], [35.7, 6952.0], [35.8, 6961.0], [35.9, 7018.0], [36.0, 7173.0], [36.1, 7212.0], [36.2, 7292.0], [36.3, 7348.0], [36.4, 7354.0], [36.5, 7537.0], [36.6, 7631.0], [36.7, 7757.0], [36.8, 7767.0], [36.9, 7773.0], [37.0, 7830.0], [37.1, 7871.0], [37.2, 8105.0], [37.3, 8129.0], [37.4, 8177.0], [37.5, 8259.0], [37.6, 8286.0], [37.7, 8429.0], [37.8, 8499.0], [37.9, 8539.0], [38.0, 8560.0], [38.1, 8573.0], [38.2, 8786.0], [38.3, 9152.0], [38.4, 9334.0], [38.5, 9477.0], [38.6, 9635.0], [38.7, 9716.0], [38.8, 10036.0], [38.9, 10037.0], [39.0, 10037.0], [39.1, 10037.0], [39.2, 10038.0], [39.3, 10038.0], [39.4, 10043.0], [39.5, 10076.0], [39.6, 10079.0], [39.7, 10111.0], [39.8, 10111.0], [39.9, 10111.0], [40.0, 10111.0], [40.1, 10111.0], [40.2, 10111.0], [40.3, 10111.0], [40.4, 10112.0], [40.5, 10112.0], [40.6, 10112.0], [40.7, 10112.0], [40.8, 10112.0], [40.9, 10112.0], [41.0, 10112.0], [41.1, 10112.0], [41.2, 10112.0], [41.3, 10112.0], [41.4, 10112.0], [41.5, 10112.0], [41.6, 10113.0], [41.7, 10113.0], [41.8, 10113.0], [41.9, 10113.0], [42.0, 10113.0], [42.1, 10113.0], [42.2, 10113.0], [42.3, 10113.0], [42.4, 10113.0], [42.5, 10113.0], [42.6, 10113.0], [42.7, 10113.0], [42.8, 10113.0], [42.9, 10114.0], [43.0, 10114.0], [43.1, 10114.0], [43.2, 10114.0], [43.3, 10114.0], [43.4, 10114.0], [43.5, 10114.0], [43.6, 10114.0], [43.7, 10114.0], [43.8, 10114.0], [43.9, 10115.0], [44.0, 10115.0], [44.1, 10115.0], [44.2, 10115.0], [44.3, 10115.0], [44.4, 10115.0], [44.5, 10115.0], [44.6, 10115.0], [44.7, 10115.0], [44.8, 10115.0], [44.9, 10115.0], [45.0, 10116.0], [45.1, 10116.0], [45.2, 10116.0], [45.3, 10116.0], [45.4, 10116.0], [45.5, 10116.0], [45.6, 10116.0], [45.7, 10116.0], [45.8, 10116.0], [45.9, 10116.0], [46.0, 10117.0], [46.1, 10117.0], [46.2, 10117.0], [46.3, 10117.0], [46.4, 10117.0], [46.5, 10117.0], [46.6, 10117.0], [46.7, 10117.0], [46.8, 10117.0], [46.9, 10118.0], [47.0, 10118.0], [47.1, 10118.0], [47.2, 10118.0], [47.3, 10118.0], [47.4, 10119.0], [47.5, 10119.0], [47.6, 10119.0], [47.7, 10120.0], [47.8, 10120.0], [47.9, 10121.0], [48.0, 10121.0], [48.1, 10121.0], [48.2, 10122.0], [48.3, 10123.0], [48.4, 10125.0], [48.5, 10127.0], [48.6, 10127.0], [48.7, 10128.0], [48.8, 10129.0], [48.9, 10139.0], [49.0, 10146.0], [49.1, 10148.0], [49.2, 10149.0], [49.3, 10149.0], [49.4, 10152.0], [49.5, 10153.0], [49.6, 10154.0], [49.7, 10157.0], [49.8, 10159.0], [49.9, 10187.0], [50.0, 10190.0], [50.1, 10191.0], [50.2, 10193.0], [50.3, 10193.0], [50.4, 10193.0], [50.5, 10194.0], [50.6, 10194.0], [50.7, 10194.0], [50.8, 10195.0], [50.9, 10195.0], [51.0, 10196.0], [51.1, 10196.0], [51.2, 10197.0], [51.3, 10197.0], [51.4, 10197.0], [51.5, 10197.0], [51.6, 10198.0], [51.7, 10198.0], [51.8, 10198.0], [51.9, 10199.0], [52.0, 10201.0], [52.1, 10201.0], [52.2, 10203.0], [52.3, 10206.0], [52.4, 10207.0], [52.5, 10209.0], [52.6, 10210.0], [52.7, 10217.0], [52.8, 10229.0], [52.9, 10229.0], [53.0, 10231.0], [53.1, 10232.0], [53.2, 10233.0], [53.3, 10234.0], [53.4, 10234.0], [53.5, 10234.0], [53.6, 10235.0], [53.7, 10236.0], [53.8, 10237.0], [53.9, 10240.0], [54.0, 10241.0], [54.1, 10242.0], [54.2, 10244.0], [54.3, 10245.0], [54.4, 10251.0], [54.5, 10252.0], [54.6, 10253.0], [54.7, 10254.0], [54.8, 10254.0], [54.9, 10256.0], [55.0, 10257.0], [55.1, 10257.0], [55.2, 10258.0], [55.3, 10258.0], [55.4, 10258.0], [55.5, 10260.0], [55.6, 10261.0], [55.7, 10266.0], [55.8, 10267.0], [55.9, 10272.0], [56.0, 10276.0], [56.1, 10284.0], [56.2, 10284.0], [56.3, 10287.0], [56.4, 10305.0], [56.5, 10308.0], [56.6, 10310.0], [56.7, 10317.0], [56.8, 10319.0], [56.9, 10320.0], [57.0, 10330.0], [57.1, 10331.0], [57.2, 10333.0], [57.3, 10334.0], [57.4, 10338.0], [57.5, 10341.0], [57.6, 10342.0], [57.7, 10352.0], [57.8, 10359.0], [57.9, 10479.0], [58.0, 10485.0], [58.1, 10572.0], [58.2, 10878.0], [58.3, 10878.0], [58.4, 10884.0], [58.5, 10892.0], [58.6, 11047.0], [58.7, 11107.0], [58.8, 11118.0], [58.9, 11200.0], [59.0, 11267.0], [59.1, 11282.0], [59.2, 11346.0], [59.3, 11379.0], [59.4, 11435.0], [59.5, 11446.0], [59.6, 11652.0], [59.7, 11712.0], [59.8, 11888.0], [59.9, 11993.0], [60.0, 12062.0], [60.1, 12064.0], [60.2, 12103.0], [60.3, 12189.0], [60.4, 12261.0], [60.5, 12302.0], [60.6, 12304.0], [60.7, 12480.0], [60.8, 12539.0], [60.9, 12608.0], [61.0, 12655.0], [61.1, 12670.0], [61.2, 12755.0], [61.3, 12822.0], [61.4, 12998.0], [61.5, 13241.0], [61.6, 13363.0], [61.7, 13431.0], [61.8, 13553.0], [61.9, 13682.0], [62.0, 13763.0], [62.1, 13922.0], [62.2, 14650.0], [62.3, 14988.0], [62.4, 15085.0], [62.5, 15191.0], [62.6, 15297.0], [62.7, 15596.0], [62.8, 15617.0], [62.9, 15969.0], [63.0, 16439.0], [63.1, 16939.0], [63.2, 17156.0], [63.3, 17304.0], [63.4, 17456.0], [63.5, 17478.0], [63.6, 17486.0], [63.7, 17549.0], [63.8, 17570.0], [63.9, 17662.0], [64.0, 17685.0], [64.1, 17703.0], [64.2, 17719.0], [64.3, 18103.0], [64.4, 18144.0], [64.5, 18181.0], [64.6, 18243.0], [64.7, 18268.0], [64.8, 18342.0], [64.9, 18441.0], [65.0, 18563.0], [65.1, 18614.0], [65.2, 18788.0], [65.3, 18904.0], [65.4, 19044.0], [65.5, 19097.0], [65.6, 19273.0], [65.7, 19585.0], [65.8, 19698.0], [65.9, 19791.0], [66.0, 20121.0], [66.1, 20181.0], [66.2, 21580.0], [66.3, 21706.0], [66.4, 21894.0], [66.5, 22091.0], [66.6, 22183.0], [66.7, 22536.0], [66.8, 22561.0], [66.9, 22636.0], [67.0, 22865.0], [67.1, 22906.0], [67.2, 23503.0], [67.3, 23672.0], [67.4, 24044.0], [67.5, 25000.0], [67.6, 25075.0], [67.7, 25459.0], [67.8, 25535.0], [67.9, 25720.0], [68.0, 25946.0], [68.1, 26211.0], [68.2, 26310.0], [68.3, 26875.0], [68.4, 27161.0], [68.5, 27497.0], [68.6, 28709.0], [68.7, 29602.0], [68.8, 29767.0], [68.9, 31607.0], [69.0, 32479.0], [69.1, 32564.0], [69.2, 32789.0], [69.3, 32848.0], [69.4, 33073.0], [69.5, 33222.0], [69.6, 33724.0], [69.7, 37228.0], [69.8, 37503.0], [69.9, 37998.0], [70.0, 38352.0], [70.1, 38555.0], [70.2, 38998.0], [70.3, 39092.0], [70.4, 39724.0], [70.5, 39972.0], [70.6, 40112.0], [70.7, 40407.0], [70.8, 40583.0], [70.9, 40744.0], [71.0, 40802.0], [71.1, 41014.0], [71.2, 41094.0], [71.3, 41148.0], [71.4, 41737.0], [71.5, 41942.0], [71.6, 42150.0], [71.7, 42668.0], [71.8, 42725.0], [71.9, 42779.0], [72.0, 43399.0], [72.1, 43553.0], [72.2, 43568.0], [72.3, 43786.0], [72.4, 44080.0], [72.5, 44245.0], [72.6, 44383.0], [72.7, 44421.0], [72.8, 44444.0], [72.9, 44490.0], [73.0, 44657.0], [73.1, 44704.0], [73.2, 44851.0], [73.3, 45011.0], [73.4, 45040.0], [73.5, 45173.0], [73.6, 45185.0], [73.7, 45486.0], [73.8, 45723.0], [73.9, 45787.0], [74.0, 46016.0], [74.1, 46273.0], [74.2, 46510.0], [74.3, 46829.0], [74.4, 47267.0], [74.5, 47459.0], [74.6, 48383.0], [74.7, 48456.0], [74.8, 48588.0], [74.9, 48673.0], [75.0, 48773.0], [75.1, 48802.0], [75.2, 49051.0], [75.3, 49066.0], [75.4, 49088.0], [75.5, 49746.0], [75.6, 49764.0], [75.7, 50052.0], [75.8, 50149.0], [75.9, 50419.0], [76.0, 50473.0], [76.1, 50709.0], [76.2, 50895.0], [76.3, 51056.0], [76.4, 51149.0], [76.5, 51241.0], [76.6, 51392.0], [76.7, 51415.0], [76.8, 51617.0], [76.9, 51735.0], [77.0, 51873.0], [77.1, 52016.0], [77.2, 52254.0], [77.3, 52261.0], [77.4, 52265.0], [77.5, 53500.0], [77.6, 53683.0], [77.7, 53905.0], [77.8, 54018.0], [77.9, 54131.0], [78.0, 54574.0], [78.1, 55121.0], [78.2, 55154.0], [78.3, 55292.0], [78.4, 59205.0], [78.5, 59415.0], [78.6, 59577.0], [78.7, 59755.0], [78.8, 59788.0], [78.9, 59822.0], [79.0, 60036.0], [79.1, 60036.0], [79.2, 60039.0], [79.3, 60076.0], [79.4, 60077.0], [79.5, 60079.0], [79.6, 60080.0], [79.7, 60083.0], [79.8, 60098.0], [79.9, 60111.0], [80.0, 60111.0], [80.1, 60112.0], [80.2, 60113.0], [80.3, 60113.0], [80.4, 60113.0], [80.5, 60113.0], [80.6, 60114.0], [80.7, 60114.0], [80.8, 60114.0], [80.9, 60114.0], [81.0, 60115.0], [81.1, 60115.0], [81.2, 60117.0], [81.3, 60119.0], [81.4, 60134.0], [81.5, 60137.0], [81.6, 60141.0], [81.7, 60146.0], [81.8, 60150.0], [81.9, 60153.0], [82.0, 60154.0], [82.1, 60155.0], [82.2, 60158.0], [82.3, 60160.0], [82.4, 60162.0], [82.5, 60162.0], [82.6, 60163.0], [82.7, 60166.0], [82.8, 60173.0], [82.9, 60191.0], [83.0, 60193.0], [83.1, 60194.0], [83.2, 60198.0], [83.3, 60199.0], [83.4, 60201.0], [83.5, 60215.0], [83.6, 60231.0], [83.7, 60232.0], [83.8, 60232.0], [83.9, 60233.0], [84.0, 60234.0], [84.1, 60235.0], [84.2, 60236.0], [84.3, 60236.0], [84.4, 60237.0], [84.5, 60238.0], [84.6, 60249.0], [84.7, 60269.0], [84.8, 60281.0], [84.9, 60285.0], [85.0, 60305.0], [85.1, 60306.0], [85.2, 60314.0], [85.3, 60316.0], [85.4, 60334.0], [85.5, 60348.0], [85.6, 60357.0], [85.7, 60401.0], [85.8, 60405.0], [85.9, 60425.0], [86.0, 60437.0], [86.1, 60447.0], [86.2, 60624.0], [86.3, 60785.0], [86.4, 60787.0], [86.5, 60793.0], [86.6, 60794.0], [86.7, 60801.0], [86.8, 60803.0], [86.9, 61076.0], [87.0, 61133.0], [87.1, 61134.0], [87.2, 61141.0], [87.3, 61194.0], [87.4, 61225.0], [87.5, 61239.0], [87.6, 61241.0], [87.7, 61327.0], [87.8, 61346.0], [87.9, 61493.0], [88.0, 61574.0], [88.1, 61596.0], [88.2, 61653.0], [88.3, 61678.0], [88.4, 61685.0], [88.5, 61705.0], [88.6, 61710.0], [88.7, 61771.0], [88.8, 61771.0], [88.9, 61782.0], [89.0, 61822.0], [89.1, 61829.0], [89.2, 61833.0], [89.3, 61869.0], [89.4, 61898.0], [89.5, 61907.0], [89.6, 61933.0], [89.7, 61970.0], [89.8, 61974.0], [89.9, 62027.0], [90.0, 62080.0], [90.1, 62080.0], [90.2, 62101.0], [90.3, 62109.0], [90.4, 62140.0], [90.5, 62159.0], [90.6, 62166.0], [90.7, 62174.0], [90.8, 62179.0], [90.9, 62201.0], [91.0, 62204.0], [91.1, 62205.0], [91.2, 62225.0], [91.3, 62229.0], [91.4, 62233.0], [91.5, 62275.0], [91.6, 62290.0], [91.7, 62335.0], [91.8, 62374.0], [91.9, 62401.0], [92.0, 62434.0], [92.1, 62482.0], [92.2, 62487.0], [92.3, 62533.0], [92.4, 62621.0], [92.5, 62661.0], [92.6, 62707.0], [92.7, 62724.0], [92.8, 62752.0], [92.9, 62779.0], [93.0, 62786.0], [93.1, 62810.0], [93.2, 62880.0], [93.3, 62896.0], [93.4, 62901.0], [93.5, 62924.0], [93.6, 63035.0], [93.7, 63132.0], [93.8, 63134.0], [93.9, 63972.0], [94.0, 64357.0], [94.1, 64379.0], [94.2, 64414.0], [94.3, 64445.0], [94.4, 64499.0], [94.5, 64783.0], [94.6, 64971.0], [94.7, 65825.0], [94.8, 65910.0], [94.9, 65983.0], [95.0, 66659.0], [95.1, 66675.0], [95.2, 67599.0], [95.3, 67664.0], [95.4, 67840.0], [95.5, 68262.0], [95.6, 68395.0], [95.7, 69042.0], [95.8, 69050.0], [95.9, 69567.0], [96.0, 69889.0], [96.1, 70063.0], [96.2, 71072.0], [96.3, 71389.0], [96.4, 72147.0], [96.5, 72504.0], [96.6, 72526.0], [96.7, 72808.0], [96.8, 72853.0], [96.9, 73146.0], [97.0, 74160.0], [97.1, 74654.0], [97.2, 74860.0], [97.3, 75612.0], [97.4, 77158.0], [97.5, 77467.0], [97.6, 77476.0], [97.7, 79587.0], [97.8, 80124.0], [97.9, 80710.0], [98.0, 82757.0], [98.1, 84034.0], [98.2, 84385.0], [98.3, 84974.0], [98.4, 86003.0], [98.5, 86436.0], [98.6, 86437.0], [98.7, 92287.0], [98.8, 92315.0], [98.9, 92432.0], [99.0, 92513.0], [99.1, 92607.0], [99.2, 92731.0], [99.3, 92746.0], [99.4, 92954.0], [99.5, 93104.0], [99.6, 93137.0], [99.7, 93272.0], [99.8, 93299.0], [99.9, 105518.0]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 197.0, "series": [{"data": [[0.0, 35.0], [68300.0, 1.0], [73100.0, 1.0], [74700.0, 1.0], [79500.0, 1.0], [82700.0, 1.0], [84300.0, 1.0], [92300.0, 2.0], [100.0, 42.0], [32900.0, 1.0], [33700.0, 1.0], [36900.0, 1.0], [38500.0, 1.0], [40100.0, 1.0], [41700.0, 1.0], [43300.0, 1.0], [45700.0, 3.0], [46500.0, 1.0], [47300.0, 1.0], [48900.0, 1.0], [49700.0, 2.0], [200.0, 41.0], [51300.0, 2.0], [54500.0, 1.0], [59300.0, 1.0], [60100.0, 56.0], [60900.0, 1.0], [61700.0, 8.0], [62500.0, 2.0], [64900.0, 1.0], [65800.0, 1.0], [69000.0, 3.0], [300.0, 52.0], [81800.0, 1.0], [93000.0, 1.0], [400.0, 30.0], [104200.0, 1.0], [500.0, 29.0], [600.0, 23.0], [700.0, 12.0], [800.0, 11.0], [900.0, 16.0], [1000.0, 13.0], [1100.0, 12.0], [1200.0, 8.0], [1300.0, 9.0], [1400.0, 7.0], [1500.0, 7.0], [1600.0, 2.0], [1700.0, 5.0], [1800.0, 2.0], [1900.0, 8.0], [2000.0, 12.0], [2100.0, 13.0], [2300.0, 15.0], [2200.0, 12.0], [2400.0, 9.0], [2500.0, 5.0], [2600.0, 1.0], [2800.0, 5.0], [2700.0, 2.0], [2900.0, 6.0], [3000.0, 7.0], [3100.0, 3.0], [3200.0, 7.0], [3300.0, 4.0], [3400.0, 5.0], [3500.0, 7.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 1.0], [4200.0, 9.0], [4300.0, 5.0], [4100.0, 4.0], [68100.0, 1.0], [4600.0, 2.0], [4400.0, 1.0], [4500.0, 2.0], [71300.0, 1.0], [4700.0, 4.0], [4800.0, 4.0], [5000.0, 1.0], [4900.0, 4.0], [5100.0, 1.0], [5300.0, 5.0], [5200.0, 5.0], [5600.0, 2.0], [5500.0, 5.0], [5400.0, 1.0], [5800.0, 1.0], [5700.0, 3.0], [5900.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [6200.0, 6.0], [6300.0, 1.0], [6600.0, 4.0], [6400.0, 2.0], [6500.0, 2.0], [6700.0, 3.0], [6900.0, 4.0], [6800.0, 2.0], [7000.0, 2.0], [7100.0, 1.0], [7200.0, 3.0], [7300.0, 3.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 5.0], [7800.0, 3.0], [8100.0, 4.0], [8000.0, 1.0], [8200.0, 4.0], [8400.0, 2.0], [9200.0, 1.0], [9400.0, 2.0], [9600.0, 2.0], [10200.0, 70.0], [10000.0, 15.0], [10600.0, 1.0], [10400.0, 3.0], [11200.0, 5.0], [11000.0, 2.0], [10800.0, 6.0], [11600.0, 1.0], [11400.0, 4.0], [12200.0, 2.0], [12000.0, 2.0], [11800.0, 1.0], [12600.0, 5.0], [12400.0, 1.0], [13200.0, 1.0], [12800.0, 1.0], [13600.0, 2.0], [13400.0, 1.0], [14600.0, 1.0], [15000.0, 2.0], [15200.0, 1.0], [15800.0, 1.0], [15600.0, 1.0], [16400.0, 1.0], [18400.0, 1.0], [17600.0, 3.0], [19200.0, 1.0], [19600.0, 1.0], [22000.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [24400.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [25600.0, 1.0], [26800.0, 1.0], [29200.0, 1.0], [29600.0, 1.0], [30000.0, 1.0], [31600.0, 1.0], [32400.0, 1.0], [32800.0, 1.0], [37600.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [43200.0, 1.0], [44000.0, 2.0], [44800.0, 1.0], [47200.0, 2.0], [48800.0, 1.0], [50400.0, 3.0], [51200.0, 2.0], [52000.0, 2.0], [55200.0, 1.0], [53600.0, 1.0], [59200.0, 1.0], [60000.0, 14.0], [60800.0, 2.0], [61600.0, 6.0], [62400.0, 6.0], [64000.0, 1.0], [86400.0, 2.0], [92700.0, 3.0], [105500.0, 1.0], [33100.0, 1.0], [37900.0, 1.0], [38700.0, 1.0], [40300.0, 1.0], [41100.0, 1.0], [41900.0, 1.0], [42700.0, 3.0], [43500.0, 3.0], [44300.0, 2.0], [45100.0, 3.0], [48300.0, 2.0], [50700.0, 2.0], [53900.0, 1.0], [60300.0, 11.0], [59500.0, 1.0], [61100.0, 6.0], [61900.0, 7.0], [62700.0, 8.0], [64300.0, 2.0], [66200.0, 1.0], [67800.0, 1.0], [71000.0, 1.0], [77400.0, 2.0], [68500.0, 1.0], [70100.0, 1.0], [92500.0, 1.0], [17300.0, 2.0], [16900.0, 1.0], [17700.0, 3.0], [18100.0, 5.0], [18500.0, 2.0], [18900.0, 2.0], [19300.0, 1.0], [19700.0, 2.0], [20100.0, 2.0], [22100.0, 1.0], [22500.0, 2.0], [21700.0, 2.0], [22900.0, 1.0], [25700.0, 2.0], [27300.0, 1.0], [29700.0, 1.0], [32500.0, 1.0], [33000.0, 1.0], [41000.0, 3.0], [41800.0, 1.0], [42600.0, 1.0], [44200.0, 1.0], [45000.0, 3.0], [45800.0, 1.0], [47400.0, 1.0], [49000.0, 4.0], [49800.0, 1.0], [52200.0, 4.0], [51400.0, 1.0], [53800.0, 1.0], [60200.0, 27.0], [59400.0, 1.0], [61000.0, 1.0], [62600.0, 3.0], [61800.0, 7.0], [63400.0, 1.0], [65000.0, 1.0], [67600.0, 1.0], [72400.0, 1.0], [75600.0, 1.0], [74000.0, 1.0], [93200.0, 2.0], [65900.0, 3.0], [67500.0, 2.0], [77100.0, 1.0], [93100.0, 3.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [40500.0, 2.0], [42100.0, 2.0], [43700.0, 1.0], [48500.0, 2.0], [49300.0, 1.0], [50100.0, 1.0], [51700.0, 1.0], [54100.0, 1.0], [59700.0, 4.0], [61300.0, 2.0], [62100.0, 10.0], [62900.0, 4.0], [64500.0, 1.0], [66600.0, 2.0], [68200.0, 1.0], [69800.0, 2.0], [73000.0, 1.0], [74600.0, 1.0], [84200.0, 1.0], [85800.0, 1.0], [92200.0, 2.0], [72100.0, 1.0], [80100.0, 2.0], [84900.0, 1.0], [92900.0, 2.0], [8500.0, 5.0], [8700.0, 2.0], [9100.0, 1.0], [9700.0, 1.0], [9300.0, 1.0], [10100.0, 197.0], [10300.0, 24.0], [10500.0, 1.0], [11100.0, 3.0], [11300.0, 2.0], [11700.0, 2.0], [11900.0, 3.0], [12100.0, 3.0], [12300.0, 4.0], [12500.0, 2.0], [12700.0, 1.0], [12900.0, 2.0], [13300.0, 2.0], [13100.0, 1.0], [13700.0, 2.0], [13500.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14900.0, 1.0], [15300.0, 1.0], [15100.0, 2.0], [15500.0, 1.0], [15900.0, 2.0], [17400.0, 4.0], [18200.0, 3.0], [19000.0, 3.0], [18600.0, 2.0], [20200.0, 1.0], [19800.0, 1.0], [21800.0, 1.0], [22600.0, 3.0], [25000.0, 3.0], [25400.0, 1.0], [26200.0, 2.0], [27400.0, 1.0], [32600.0, 1.0], [33200.0, 1.0], [37200.0, 1.0], [40400.0, 1.0], [44400.0, 4.0], [45200.0, 1.0], [46000.0, 1.0], [46800.0, 1.0], [48400.0, 1.0], [50800.0, 1.0], [50000.0, 1.0], [51600.0, 2.0], [53200.0, 1.0], [54000.0, 2.0], [55600.0, 1.0], [61200.0, 6.0], [60400.0, 8.0], [62000.0, 5.0], [62800.0, 4.0], [64400.0, 5.0], [72800.0, 2.0], [79200.0, 1.0], [84000.0, 1.0], [69500.0, 1.0], [80700.0, 1.0], [106300.0, 1.0], [37500.0, 1.0], [38300.0, 1.0], [39100.0, 1.0], [39900.0, 2.0], [40700.0, 2.0], [44700.0, 2.0], [43900.0, 1.0], [46300.0, 1.0], [48700.0, 2.0], [51100.0, 2.0], [50300.0, 1.0], [55100.0, 3.0], [53500.0, 1.0], [60700.0, 7.0], [61500.0, 3.0], [62300.0, 4.0], [63100.0, 3.0], [63900.0, 1.0], [64700.0, 1.0], [92600.0, 1.0], [67700.0, 1.0], [72500.0, 3.0], [75700.0, 1.0], [77300.0, 1.0], [74100.0, 1.0], [17100.0, 2.0], [18300.0, 2.0], [17500.0, 4.0], [18700.0, 1.0], [19500.0, 1.0], [21500.0, 1.0], [22300.0, 1.0], [21900.0, 1.0], [23500.0, 1.0], [25500.0, 1.0], [26300.0, 1.0], [25900.0, 1.0], [27100.0, 2.0], [28700.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [39000.0, 1.0], [44600.0, 2.0], [45400.0, 1.0], [46200.0, 1.0], [48600.0, 1.0], [51000.0, 1.0], [51800.0, 2.0], [54200.0, 1.0], [61400.0, 2.0], [60600.0, 1.0], [59800.0, 1.0], [62200.0, 13.0], [63000.0, 1.0], [70000.0, 1.0], [71600.0, 1.0], [74800.0, 1.0], [86000.0, 2.0], [92400.0, 2.0]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 106300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 106.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1494.0, "series": [{"data": [[3.0, 1494.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[2.0, 106.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 91.92391304347832, "minX": 1.52508396E12, "maxY": 286.3237704918036, "series": [{"data": [[1.52508402E12, 211.60999999999999], [1.52508396E12, 286.3237704918036], [1.52508408E12, 91.92391304347832]], "isOverall": false, "label": "Digisoria Customer 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.52508408E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 49.5, "minX": 1.0, "maxY": 68051.0, "series": [{"data": [[2.0, 11888.0], [3.0, 1693.0], [4.0, 6104.5], [5.0, 11285.0], [6.0, 275.0], [7.0, 10192.0], [8.0, 10177.333333333334], [9.0, 10113.0], [10.0, 5191.0], [11.0, 10115.0], [12.0, 10116.0], [13.0, 1731.0], [14.0, 12998.0], [15.0, 12822.0], [16.0, 10114.0], [17.0, 10115.5], [18.0, 13431.0], [19.0, 268.0], [20.0, 10111.5], [21.0, 10112.0], [22.0, 10113.0], [23.0, 10117.0], [24.0, 5198.5], [25.0, 10112.0], [26.0, 30198.5], [27.0, 60146.0], [28.0, 3481.0], [29.0, 3517.0], [30.0, 13363.0], [31.0, 10112.0], [33.0, 10113.0], [32.0, 35214.0], [35.0, 60269.0], [34.0, 60137.0], [37.0, 60215.5], [36.0, 60083.0], [39.0, 43456.33333333333], [38.0, 60163.0], [41.0, 10194.333333333334], [40.0, 5185.5], [43.0, 60173.0], [42.0, 335.5], [45.0, 60142.57142857143], [44.0, 344.0], [46.0, 35138.5], [49.0, 10194.0], [48.0, 47648.75], [51.0, 10116.0], [50.0, 11434.0], [53.0, 12146.0], [55.0, 2939.0], [54.0, 2261.0], [57.0, 6975.5], [56.0, 4694.0], [59.0, 10112.0], [58.0, 9136.0], [61.0, 7145.5], [60.0, 10211.0], [63.0, 10117.0], [62.0, 10206.0], [67.0, 10119.0], [66.0, 6427.0], [65.0, 12062.0], [64.0, 10197.0], [71.0, 10201.0], [70.0, 259.0], [69.0, 39388.25], [68.0, 10114.0], [75.0, 3937.0], [74.0, 1779.5], [73.0, 3378.5], [72.0, 10096.0], [79.0, 10113.0], [78.0, 11422.5], [77.0, 10151.5], [76.0, 10113.0], [83.0, 52134.0], [82.0, 20512.333333333332], [81.0, 61126.0], [80.0, 8063.0], [87.0, 30190.0], [86.0, 20280.333333333336], [85.0, 60114.0], [84.0, 49171.2], [91.0, 36213.0], [90.0, 35258.0], [89.0, 10121.0], [88.0, 10194.0], [95.0, 2430.0], [94.0, 2235.0], [93.0, 32345.5], [92.0, 42305.18181818182], [99.0, 35153.25], [98.0, 60113.0], [97.0, 10113.0], [96.0, 28360.71428571429], [103.0, 10168.5], [102.0, 8824.0], [101.0, 8210.666666666666], [100.0, 10119.5], [107.0, 37964.6], [106.0, 27083.4], [105.0, 10112.0], [104.0, 4774.0], [111.0, 32572.000000000004], [110.0, 10199.0], [109.0, 10193.0], [108.0, 2953.5], [115.0, 17466.0], [114.0, 21026.0], [113.0, 34550.0], [112.0, 10390.5], [119.0, 44477.0], [118.0, 26490.000000000004], [117.0, 24204.666666666664], [116.0, 60116.0], [123.0, 5700.5], [122.0, 38931.5], [121.0, 42270.33333333333], [120.0, 27163.285714285714], [127.0, 8611.0], [126.0, 10532.5], [125.0, 31281.214285714286], [124.0, 9163.75], [135.0, 42535.5], [134.0, 10194.5], [133.0, 331.0], [132.0, 5259.0], [131.0, 68051.0], [130.0, 178.0], [129.0, 315.0], [128.0, 6848.0], [143.0, 3109.0], [142.0, 30890.5], [141.0, 11612.166666666668], [140.0, 291.0], [139.0, 5228.5], [138.0, 324.0], [137.0, 23271.0], [136.0, 42617.5], [151.0, 60237.0], [150.0, 33567.0], [149.0, 349.0], [148.0, 3797.5], [147.0, 23704.714285714286], [146.0, 16725.142857142855], [145.0, 61141.0], [144.0, 44226.33333333333], [159.0, 41624.66666666667], [158.0, 32577.75], [157.0, 61903.5], [156.0, 61782.0], [155.0, 10198.0], [154.0, 64936.0], [153.0, 62478.555555555555], [152.0, 60249.0], [167.0, 36377.6], [166.0, 60080.0], [165.0, 487.0], [164.0, 814.5], [163.0, 253.66666666666666], [162.0, 50789.10526315789], [161.0, 60097.5], [160.0, 951.0], [174.0, 10112.5], [173.0, 10113.25], [172.0, 10115.25], [171.0, 10111.0], [170.0, 10111.0], [169.0, 10113.5], [168.0, 10113.0], [183.0, 5269.5], [182.0, 699.0], [181.0, 10123.0], [180.0, 10121.0], [179.0, 10116.0], [178.0, 45328.9], [176.0, 10115.5], [191.0, 10137.5], [190.0, 10187.0], [189.0, 10159.0], [188.0, 10168.0], [187.0, 15912.000000000002], [186.0, 10226.500000000002], [185.0, 10146.666666666666], [184.0, 10242.0], [199.0, 31436.777777777777], [198.0, 10114.333333333334], [197.0, 10112.5], [196.0, 10113.0], [195.0, 10193.0], [194.0, 10115.0], [193.0, 10037.0], [192.0, 10118.0], [207.0, 12390.866666666667], [206.0, 10285.888888888889], [205.0, 10314.666666666666], [204.0, 10301.714285714286], [203.0, 6673.2], [202.0, 10120.0], [201.0, 10882.5], [200.0, 5252.25], [215.0, 18905.06666666667], [214.0, 10112.25], [213.0, 6215.6], [212.0, 10218.6], [211.0, 6887.333333333333], [210.0, 10214.0], [209.0, 10127.0], [208.0, 10127.0], [223.0, 61001.45945945946], [222.0, 62291.30303030303], [221.0, 8293.6], [220.0, 9528.0], [219.0, 10120.0], [218.0, 32860.25], [217.0, 3987.6666666666665], [216.0, 1560.0], [231.0, 30552.909090909092], [230.0, 51553.78571428572], [229.0, 44913.6875], [228.0, 11715.5], [227.0, 11579.0], [226.0, 24808.666666666664], [225.0, 11813.75], [224.0, 10114.0], [239.0, 2247.5], [238.0, 2271.2], [237.0, 3381.5], [236.0, 31204.36842105264], [235.0, 21872.57142857143], [232.0, 28663.318181818187], [247.0, 3319.0], [246.0, 14469.024390243903], [245.0, 7669.2000000000035], [244.0, 8362.222222222223], [243.0, 16662.571428571428], [242.0, 5316.0], [241.0, 387.0], [240.0, 1671.0], [255.0, 380.0], [254.0, 429.0], [253.0, 1909.0], [252.0, 4356.0], [251.0, 4815.333333333334], [250.0, 4140.333333333333], [249.0, 251.0], [248.0, 53090.21428571428], [270.0, 501.0], [271.0, 591.0], [269.0, 25051.888888888887], [268.0, 12695.090909090908], [267.0, 1191.0], [266.0, 4387.75], [265.0, 7997.142857142857], [264.0, 7821.0], [263.0, 5499.5], [257.0, 6296.727272727273], [256.0, 1162.0], [259.0, 4966.5], [258.0, 2380.0], [262.0, 5968.0], [261.0, 5161.5], [260.0, 7169.0], [286.0, 1111.2222222222222], [287.0, 903.7142857142857], [285.0, 64.0], [284.0, 153.0], [283.0, 101.0], [282.0, 81.0], [281.0, 1039.0], [280.0, 49.5], [279.0, 1003.0], [273.0, 26129.5], [272.0, 25782.5], [275.0, 10825.166666666668], [274.0, 670.6666666666666], [278.0, 960.0], [277.0, 778.0], [276.0, 2229.0], [302.0, 139.0], [303.0, 4934.000000000001], [301.0, 24509.0], [300.0, 1559.0], [298.0, 266.5], [297.0, 436.0], [296.0, 3782.25], [295.0, 3949.0], [289.0, 1057.0], [288.0, 149.0], [291.0, 1164.3333333333333], [290.0, 72.0], [294.0, 5439.166666666666], [293.0, 55.0], [292.0, 5204.0], [318.0, 155.0], [319.0, 125.0], [317.0, 125.0], [316.0, 10386.400000000001], [315.0, 9922.333333333332], [314.0, 20651.46153846154], [313.0, 23885.0], [312.0, 24414.5], [311.0, 14690.70588235294], [305.0, 164.0], [304.0, 154.5], [307.0, 608.1666666666667], [306.0, 232.59999999999997], [310.0, 26036.5], [309.0, 2900.0], [308.0, 9434.92857142857], [320.0, 20727.78095238094], [1.0, 5782.0]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}, {"data": [[218.26312500000031, 23239.463750000028]], "isOverall": false, "label": "Digisoria Shopfront 132-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 320.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4143.4, "minX": 1.52508396E12, "maxY": 57633.85, "series": [{"data": [[1.52508402E12, 15429.45], [1.52508396E12, 57633.85], [1.52508408E12, 19355.716666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.52508402E12, 4438.633333333333], [1.52508396E12, 9258.416666666666], [1.52508408E12, 4143.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.52508408E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18431.218579234956, "minX": 1.52508396E12, "maxY": 28702.892000000025, "series": [{"data": [[1.52508402E12, 28702.892000000025], [1.52508396E12, 18431.218579234956], [1.52508408E12, 25380.554347826073]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.52508408E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1136.9808743169376, "minX": 1.52508396E12, "maxY": 15868.88858695651, "series": [{"data": [[1.52508402E12, 8240.246000000003], [1.52508396E12, 1136.9808743169376], [1.52508408E12, 15868.88858695651]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.52508408E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 113.64402173913045, "minX": 1.52508396E12, "maxY": 743.2868852459031, "series": [{"data": [[1.52508402E12, 384.2639999999997], [1.52508396E12, 743.2868852459031], [1.52508408E12, 113.64402173913045]], "isOverall": false, "label": "Digisoria Shopfront 132", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.52508408E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1693.0, "minX": 1.52508396E12, "maxY": 53267.0, "series": [{"data": [[1.52508402E12, 12916.0], [1.52508396E12, 53267.0], [1.52508408E12, 9334.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.52508402E12, 10572.0], [1.52508396E12, 6244.0], [1.52508408E12, 1693.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.52508402E12, 51549.5], [1.52508396E12, 51594.5], [1.52508408E12, 49693.59999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.52508402E12, 53267.0], [1.52508396E12, 53267.0], [1.52508408E12, 53179.70999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.52508402E12, 51869.7], [1.52508396E12, 51871.9], [1.52508408E12, 51627.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.52508408E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3149.0, "minX": 6.0, "maxY": 44573.5, "series": [{"data": [[8.0, 11744.0], [12.0, 44573.5], [6.0, 5598.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 10307.5], [12.0, 3149.0], [6.0, 10200.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 12.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 117.0, "minX": 6.0, "maxY": 2516.5, "series": [{"data": [[8.0, 117.0], [12.0, 1849.0], [6.0, 120.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 2516.5], [12.0, 239.5], [6.0, 1621.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 12.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.5166666666666666, "minX": 1.5250839E12, "maxY": 10.833333333333334, "series": [{"data": [[1.5250839E12, 5.333333333333333], [1.52508402E12, 6.983333333333333], [1.52508396E12, 10.833333333333334], [1.52508408E12, 3.5166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.52508408E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.52508396E12, "maxY": 7.983333333333333, "series": [{"data": [[1.52508402E12, 0.03333333333333333], [1.52508396E12, 1.0], [1.52508408E12, 0.7333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.52508402E12, 1.5833333333333333], [1.52508396E12, 7.983333333333333], [1.52508408E12, 1.0666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.52508402E12, 1.1333333333333333], [1.52508396E12, 0.05]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.52508396E12, 1.55]], "isOverall": false, "label": "403", "isController": false}, {"data": [[1.52508396E12, 0.016666666666666666]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.52508402E12, 5.55], [1.52508396E12, 1.6], [1.52508408E12, 4.216666666666667]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.52508402E12, 0.03333333333333333], [1.52508408E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.52508408E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.52508396E12, "maxY": 11.2, "series": [{"data": [[1.52508402E12, 0.03333333333333333], [1.52508396E12, 1.0], [1.52508408E12, 0.7333333333333333]], "isOverall": false, "label": "Digisoria Shopfront 132-success", "isController": false}, {"data": [[1.52508402E12, 8.3], [1.52508396E12, 11.2], [1.52508408E12, 5.4]], "isOverall": false, "label": "Digisoria Shopfront 132-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.52508408E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
